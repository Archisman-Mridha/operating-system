use core::arch::asm;

#[allow(non_camel_case_types)]
pub enum BitMasks {
  SUPERVISOR_SOFTWARE_INTERRUPTS_ENABLE = 1 << 1,
  SUPERVISOR_TIMER_INTERRUPTS_ENABLE = 1 << 5,
  SUPERVISOR_EXTERNAL_INTERRUPTS_ENABLE = 1 << 9,
}

/*
  The sie (Supervisor Interrupt Enable) register contains bits using which we can enable / disable
  interrupts.

  An interrupt (i) will trap to S-mode if both of the following are true :

    (a) either the current privilege mode is S and the SIE bit in the sstatus register is set, or
        the current privilege mode has less privilege than S-mode.

    (b) bit i is set in both sip and sie.

  NOTE : There are 3 types of interrupts : external (generated by external devices like the UART
  driver), software (generated by software running on the hart) and timer.
*/
// REFER : section 10.1.3 in privileged ISA manual.
pub struct Sie;

impl Sie {
  #[inline]
  pub unsafe fn enableInterrupts(&self) {
    asm!(
      "csrs sie, {}",
      in(reg)BitMasks::SUPERVISOR_EXTERNAL_INTERRUPTS_ENABLE as usize | BitMasks::SUPERVISOR_TIMER_INTERRUPTS_ENABLE as usize | BitMasks::SUPERVISOR_SOFTWARE_INTERRUPTS_ENABLE as usize
    );
  }
}
